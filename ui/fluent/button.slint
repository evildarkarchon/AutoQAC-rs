// Fluent Design Button Component
//
// A button component following Microsoft Fluent Design principles with:
// - Primary and secondary variants
// - Hover and pressed states with smooth animations
// - Disabled state styling
// - Elevation effects with shadows
//
// Usage:
//   FluentButton {
//       text: "Click Me";
//       primary: true;
//       clicked => { /* handle click */ }
//   }

import { FluentPalette, FluentAnimation, FluentTypography } from "styles.slint";

/// Fluent Design button component
///
/// Properties:
/// - text: Button label text
/// - primary: If true, uses accent color (default: false)
/// - enabled: If false, button is disabled (default: true)
/// - icon: Optional icon name (future enhancement)
///
/// Callbacks:
/// - clicked: Emitted when the button is clicked
export component FluentButton inherits Rectangle {
    // Public properties
    in property <string> text: "Button";
    in property <bool> primary: false;
    in property <bool> enabled: true;

    // Callback for click events
    callback clicked();

    // Internal state
    private property <bool> is-hovered: touch-area.has-hover && root.enabled;
    private property <bool> is-pressed: touch-area.pressed && root.enabled;

    // Styling
    min-width: FluentPalette.button-min-width;
    min-height: FluentPalette.button-min-height;
    border-radius: FluentPalette.corner-radius;

    // Background color with state-based variations
    background: {
        if (!root.enabled) {
            FluentPalette.surface
        } else if (root.is-pressed) {
            root.primary ? FluentPalette.accent-pressed : FluentPalette.surface-secondary
        } else if (root.is-hovered) {
            root.primary ? FluentPalette.accent-hover : FluentPalette.surface-secondary
        } else {
            root.primary ? FluentPalette.accent : FluentPalette.surface
        }
    };

    // Border for non-primary buttons
    border-width: root.primary ? 0px : FluentLayout.border-thin;
    border-color: root.enabled ? FluentPalette.card-stroke : FluentPalette.accent-disabled;

    // Smooth background transitions
    animate background { duration: FluentAnimation.fast; easing: FluentAnimation.standard-easing; }

    // Shadow for depth (more prominent on hover)
    drop-shadow-blur: root.is-hovered ? FluentPalette.elevation-high : FluentPalette.elevation-shadow;
    drop-shadow-color: #00000040;  // 25% black
    drop-shadow-offset-y: 2px;

    animate drop-shadow-blur { duration: FluentAnimation.fast; easing: FluentAnimation.standard-easing; }

    // Subtle scale effect on press (Fluent motion principle)
    width: 100%;
    height: 100%;

    // Touch area for interaction
    touch-area := TouchArea {
        enabled: root.enabled;
        clicked => {
            if (root.enabled) {
                root.clicked();
            }
        }
    }

    // Button content layout
    HorizontalLayout {
        padding-left: FluentPalette.spacing-lg;
        padding-right: FluentPalette.spacing-lg;
        padding-top: FluentPalette.spacing-sm;
        padding-bottom: FluentPalette.spacing-sm;
        alignment: center;

        // Button text
        Text {
            text: root.text;
            color: {
                if (!root.enabled) {
                    FluentPalette.text-disabled
                } else if (root.primary) {
                    FluentPalette.text-on-accent
                } else {
                    FluentPalette.text-primary
                }
            };
            font-size: FluentTypography.body;
            font-weight: FluentTypography.weight-semibold;
            horizontal-alignment: center;
            vertical-alignment: center;
        }
    }

    // Accessibility - cursor indication
    // Note: Slint doesn't have built-in cursor properties yet,
    // but this documents the intended behavior
}

// Import layout constants
import { FluentLayout } from "styles.slint";
